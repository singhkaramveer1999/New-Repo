Pmod_Decoder

`timescale 1ns / 1ps
module decoder(
    input clk,
    output reg [3:0] col,
    input [3:0] row,
    output reg [3:0] dout,
    output reg hit =0 
    );
    reg[19:0] count = 0;        
        always@(posedge clk)
        begin
        count = count +1;
        end
    reg[4:1] cv1 = 4'b1111,cv2 = 4'b1111,cv3 = 4'b1111,cv4 = 4'b1111;
    reg[4:1] curcol = 4'b1110;
    always@(posedge count[19])
    begin
        case(curcol)
            4'b1110:
                begin
                    cv1<= row;
                    curcol<= 4'b1101;
                end
            4'b1101:
                begin
                    cv2<= row;
                    curcol<= 4'b1011;
                end
            4'b1011:
                begin
                    cv3<= row;
                    curcol<=4'b0111;
                end 
            4'b0111:
                begin
                    cv4<= row;
                    curcol<=4'b1110;
                end
            default:
                curcol<=4'b1110;                       
        endcase 
    end  
always@(*)
    begin
       
        if(cv1[1]==0)
            begin
            dout<= 4'b1101;
             hit<=1;
             end
        else if(cv1[2]==0)
        begin
            dout<= 4'b1100;
             hit<=1;
        
        end    
        else if(cv1[3]==0)
        begin 
            dout<=4'b1011; hit<=1;
        end
        else if(cv1[4]==0)
        begin
            dout<= 4'b1010;   hit<=1;
        end
        else if(cv2[1]==0)
        begin
            dout<= 4'b1110; hit<=1;
        end
        else if(cv2[2]==0)
        begin
            dout<= 4'b1001; hit<=1;
        end
        else if(cv2[3]==0)
        begin
            dout<=  4'b0110; hit<=1;
        end
        else if(cv2[4]==0)
        begin
            dout<= 4'b11; hit<=1;
        end
        else if(cv3[1]==0)
        begin
            dout<= 4'b1111; hit<=1;
        end
        else if(cv3[2]==0)
        begin
            dout<= 4'b1000; hit<=1;
        end
        else if(cv3[3]==0)
        begin
            dout<= 4'b101; hit<=1;
        end
        else if(cv3[4]==0)
        begin
            dout<= 4'b10; hit<=1;
        end
        else if(cv4[1]==0)
        begin
            dout<= 4'b0; hit<=1;
        end
        else if(cv4[2]==0)
        begin
            dout<= 4'b111; hit<=1;
        end
        else if(cv4[3]==0)
        begin
            dout<= 4'b0100; hit<=1;
        end
        else if(cv4[4]==0)
        begin
            dout<= 4'b1; hit<=1;
        end
        else
            begin
                hit<= 0;
                dout<= 0;
                
            end    
    end
    always@(*)
    col<=curcol; 
endmodule
