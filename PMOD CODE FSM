Fsm Module:

module FSM(
    //iski clk pmod_out || enter wali hogi n enter debounced , pmod pulse
    input clk,
    input enter,
    input [3:0]dat,
    input signal,
    output[3:0] ones,
    output[3:0] tens,
    output [3:0] hundreds,
    output [3:0] thousands,
    input clr,
    output reg[3:0] outt
    );
    reg[3:0] ps =0, ns =0;
    reg[3:0] o,t,h,tt;
    parameter s0 = 0, s1 = 4'b1, s2 = 4'b10, s3 = 4'b11, s4= 4'b100, 
    x0 = 4'b101, x1 = 4'b110, x2 = 4'b111, x3 = 4'b1000, 
    inv= 4'b1001, fail = 4'b1010, pass = 4'b1011, temp = 4'b1111;
    
    //e0 -- invalid f0 -- fail pp -- pass
    reg[3:0] reg_dat = 0;
    
//    always@(posedge clk)
//    begin
//        reg_dat<=dat;
//    end

reg sig = 0;


    
    always@(posedge clk or posedge clr )
    begin
        if(clr)
            begin
                ps<=0;
                outt<=0;
                //ns<=0;
            end
        else
            begin
                ps= ns;
                outt=ns;
            end
    end
    
    
    always@(*)
    begin
        case(ps)
        s0:
            begin
            if(signal == 1'b1)
                begin
                    if(enter == 1'b0)
                    begin
                    if(dat == 4'hc)
                        ns<= temp;
                    else
                        ns<= x0; 
                end           
            end
            else if(enter == 1'b1)
                ns<= inv;
            else
                ns<= s0;    
            end
            
        temp:
            begin
            if(signal == 1'b1)
            begin
                if(enter == 1'b0)
                begin
                if(dat == 4'hc)
                    ns<= s1;
                else
                    ns<= x1; 
            end           
        end
        else if(enter == 1'b1)
            ns<= inv;
        else
            ns<= temp;    
        
            end    
        s1:
            begin
            begin
            if(signal == 1'b1)
            begin
                if(dat == 4'hc)
                    ns<= s2;
                else
                    ns<= x1;    
            end
            else if(enter == 1'b1)
                ns<= inv;
            else
                ns<= s2;    
            end
            end
        s2:
            begin
            if(signal == 1'b1)
            begin
                if(dat == 4'hd)
                    ns<= s3;
                else
                    ns<= x2;    
            end
            else if(enter == 1'b1)
                ns<= inv;
            else
                ns<= s2;    
            end
        s3:
            begin
            if(signal == 1'b1)
            begin
                if(enter == 1'b0)
                    ns<= s4;
            end
            else if(enter == 1'b1)
                ns<= pass;
            else
                ns<= s3;    
            end
        s4:
            begin
            if(signal == 1'b1)
            begin
                if(enter == 1'b0)
                    ns<= s4;
            end
            else if(enter == 1'b1)
                ns<= inv;
            else
                ns<= s4;    
            end
        x0:
            begin
            if(signal == 1'b1)
            begin
                if(enter == 1'b0)
                    ns<= x1;
            end
            else if(enter == 1'b1)
                ns<= inv;
            else
                ns<= x0;    
            end
        x1:
            begin
            if(signal == 1'b1)
                begin
                    if(enter == 1'b0)
                        ns<= x2;
                end
                else if(enter ==1'b1)
                 begin 
                     ns<= inv;
                 end
                 else
                    ns<= x1;
            end
        x2:
            begin
            
            if(signal == 1'b1)
                begin
                    if(enter == 1'b0)
                        ns<= x3;
                end
                else if(enter ==1'b1)
                 begin 
                     ns<= fail;
                 end
                 else
                 ns<=x2;
            
            end
        x3:
            begin
            if(signal == 1'b1)
                begin
                    if(enter == 1'b0)
                        ns<= x3;
                end
                else if(enter ==1'b1)
                 begin 
                     ns<= inv;
                 end
                 else
                    ns<= x3;
            end
       inv:
            begin
            ns<= inv; 
            end
       pass:
            begin
            ns<= pass; 
            end              
       fail:
            begin
            ns<= fail; 
            end
        endcase
    end
    reg[3:0] dattu = 0;
    always@(*)
    begin
       
            if(ps==inv)
                begin
                    //dattu <= 3'd0;
                    o<=0;
                    t<=0;
                    h<=0;
                    tt<=0;
            
                end
            else if(ps==fail)
                begin
                    o<=1;
                    t<=1;
                    h<=1;
                    tt<=1;
                    
                end
     else if(ps==pass)
               begin
                   o<=2;
                   t<=2;
                   h<=2;
                   tt<=2;
                  
               end
             
        else
                begin
                    o<=5;
                    t<=5;
                    h<=5;
                    tt<=5;
                end    
  end
    assign ones = o;
    assign tens = t;
    assign hundreds = h;
    assign thousands = tt;
    endmodule
